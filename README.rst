jQuery recurranceinput widget
=============================

Jquery plugin widget which support the definition of complex recurrence
rulesets based on RFC5545, the iCalendar standard.

The recurrence rule string, generated by this package, should be directly usable
in ics calendar files. It was developed for the plone.event PLIP10886 and is
used there to define python-dateutil rrulestr instances.


To Do
-----

High priority:

* Coverage running, and extend tests to 100%.
* Add RDATE and EXDATE data to the human readable output.
* Add the resulting dates in widget (maybe only in the read-only mode?).
* Refresh the occurrence list when you have changed the recurrence.

Medium priority:

* User should be able to add occurrences (RDATE) with an "Add..." link close
  to the list of occurrences.

Low priority:

* Support more obscure RFC5545 options.
* The human readable output should probably be done directly from the RRULE and
  not by using the form i18n, to improve the grammar and rule support.
* Make it possible to change the order of the fields as a part of the i18n.
  (jQuery templates)?
  

Developer information
---------------------

To test, demo or develop jquery.recurrenceinput locally you need to run a
local XML-RPC server, in the test_server.py script.

This server requires the dateutil module, so you must install it first.
Here are some examples of how to do this, depending on your platform:

Debian/Ubuntu:

    $ sudo apt-get install python-dateutil
    
A non-system Python 2 with setuptools or distribute installed:

    $ <pathtopython>/easy_install python-dateutil==1.5
    

The demo/input.html document contains basic usecases and can be used when
developing on this widget. For these to work you either need to have them on a
webserver, or you need to tell your web-browser to allow Ajax loading from your
local hard drive.

In Firefox you allow this by going to about:config and setting 
`security.fileuri.strict_origin_policy` to `false`.

In Chrome and Chromium you allow this by starting Chrome with
`--allow-file-access-from-files` as a parameter.

You also need to run the tests. These are located in tests/tests.js, and use
the QUnit test framework. You run them by opening tests/test.html in the
browser. The same issue with allowing Ajax from the local hard drive is in
effect for the tests as well.

In the `tests` directory there is also a copy of jslint.js, for easy access.
To run these you need to install a JavaScript engine, such as
Rhino or SpiderMonkey. You then run it with

    $ js tests/jslint.js <file>
 
The following files should be jslinted:

    src/jquery.recurrenceinput.config.js
    src/jquery.recurrenceinput.js
    src/tests.js
    
  
    
Contributors
------------

This project was originally started by Rok Garbas.

Authors:
  Rok Garbas
  Lennart Regebro
